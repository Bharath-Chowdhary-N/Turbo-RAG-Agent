name: Cross-Repo Sync and Incremental Vector Update

on:
  workflow_dispatch:
    inputs:
      full_reprocess:
        description: 'Force full reprocessing of all files'
        required: false
        default: 'false'
        type: boolean
  
  repository_dispatch:
    types: [panstarrs_pipeline_update]
  
  schedule:
    - cron: '0 2 * * 0'  # Sunday at 2 AM UTC

env:
  SOURCE_REPO: 'patkel/turbo_telescope'
  SOURCE_BRANCH: 'panstarrs_pipeline'
  DEST_DIR: 'data/github_repos'
  CHROMA_PERSIST_DIR: ./chroma_db
  PYTHON_VERSION: '3.10'

jobs:
  sync-and-process:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout this repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        lfs: true
        fetch-depth: 0
    
    - name: Checkout LFS objects
      run: git lfs pull
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Clone source repository
      run: |
        echo "üì• Cloning source repository: ${{ env.SOURCE_REPO }}"
        git clone --depth 1 --branch ${{ env.SOURCE_BRANCH }} \
          https://${{ secrets.PAT_TOKEN }}@github.com/${{ env.SOURCE_REPO }}.git \
          /tmp/source_repo
    
    - name: Determine processing mode
      id: mode
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event.inputs.full_reprocess }}" == "true" ]]; then
          echo "üîÑ FULL PROCESSING MODE"
          echo "mode=full" >> $GITHUB_OUTPUT
        else
          echo "üéØ INCREMENTAL PROCESSING MODE"
          echo "mode=incremental" >> $GITHUB_OUTPUT
        fi
    
    - name: Detect changed files
      id: detect_changes
      if: steps.mode.outputs.mode == 'incremental'
      run: |
        if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
          echo "üìù Detecting changed files from commit webhook"
          echo '${{ toJson(github.event.client_payload) }}' | jq -r '.commits[].modified[]' > /tmp/changed_files.txt 2>/dev/null || true
          echo '${{ toJson(github.event.client_payload) }}' | jq -r '.commits[].added[]' >> /tmp/changed_files.txt 2>/dev/null || true
          echo '${{ toJson(github.event.client_payload) }}' | jq -r '.commits[].removed[]' > /tmp/removed_files.txt 2>/dev/null || true
        else
          echo "üì¶ Manual incremental trigger"
          touch /tmp/changed_files.txt
          touch /tmp/removed_files.txt
        fi
        
        echo "Changed files:"
        cat /tmp/changed_files.txt || echo "None"
    
    - name: Sync files incrementally
      id: sync_incr
      if: steps.mode.outputs.mode == 'incremental'
      run: |
        SOURCE_PATH="/tmp/source_repo"
        DEST_PATH="${{ env.DEST_DIR }}"
        
        echo "üîÑ Syncing changed files to $DEST_PATH"
        mkdir -p "$DEST_PATH"
        
        rm -f /tmp/files_to_process.txt
        touch /tmp/files_to_process.txt
        
        CHANGED_COUNT=0
        
        if [[ -s /tmp/changed_files.txt ]]; then
          echo "üìù Syncing only changed files"
          
          while IFS= read -r file; do
            if [ -n "$file" ] && [ -f "$SOURCE_PATH/$file" ]; then
              mkdir -p "$DEST_PATH/$(dirname "$file")"
              cp -f "$SOURCE_PATH/$file" "$DEST_PATH/$file"
              echo "‚úì Synced: $file"
              echo "$DEST_PATH/$file" >> /tmp/files_to_process.txt
              ((CHANGED_COUNT++))
            fi
          done < /tmp/changed_files.txt
          
          if [ -s /tmp/removed_files.txt ]; then
            while IFS= read -r file; do
              if [ -n "$file" ]; then
                if [ -f "$DEST_PATH/$file" ]; then
                  echo "üóëÔ∏è Removing: $file"
                  rm -f "$DEST_PATH/$file"
                fi
                echo "REMOVED:$DEST_PATH/$file" >> /tmp/files_to_process.txt
                ((CHANGED_COUNT++))
              fi
            done < /tmp/removed_files.txt
          fi
          
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "files_changed=$CHANGED_COUNT" >> $GITHUB_OUTPUT
          echo "üìä Changed: $CHANGED_COUNT file(s)"
        else
          echo "üì¶ Syncing all files (manual trigger)"
          
          rsync -av --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            "$SOURCE_PATH/" "$DEST_PATH/"
          
          echo "MANUAL_SYNC_ALL" > /tmp/files_to_process.txt
          
          CHANGED_COUNT=$(find "$DEST_PATH" -type f | wc -l)
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "files_changed=$CHANGED_COUNT" >> $GITHUB_OUTPUT
          echo "üìä Total files: $CHANGED_COUNT"
        fi
        
        echo "Files marked for vector processing:"
        cat /tmp/files_to_process.txt
    
    - name: Sync all files for full processing
      id: sync_all
      if: steps.mode.outputs.mode == 'full'
      run: |
        SOURCE_PATH="/tmp/source_repo"
        DEST_PATH="${{ env.DEST_DIR }}"
        
        echo "üì¶ FULL SYNC - Syncing all files to $DEST_PATH"
        mkdir -p "$DEST_PATH"
        
        rsync -av --delete \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='*.pyc' \
          --exclude='__pycache__' \
          "$SOURCE_PATH/" "$DEST_PATH/"
        
        TOTAL_FILES=$(find "$DEST_PATH" -type f | wc -l)
        echo "has_changes=true" >> $GITHUB_OUTPUT
        echo "files_changed=$TOTAL_FILES" >> $GITHUB_OUTPUT
        echo "üìä Total files synced: $TOTAL_FILES"
    
    - name: Track with Git LFS
      run: |
        cd ${{ env.DEST_DIR }}
        find . -type f -size +100M -exec git lfs track {} \; 2>/dev/null || true
        git lfs track "*.fits" 2>/dev/null || true
        git lfs track "*.hdf5" 2>/dev/null || true
        git lfs track "*.h5" 2>/dev/null || true
        git lfs track "*.parquet" 2>/dev/null || true
        git lfs track "*.pkl" 2>/dev/null || true
    
    - name: Commit and push changes
      id: commit
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add -f ${{ env.DEST_DIR }}
        git add .gitattributes 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          if [[ "${{ steps.mode.outputs.mode }}" == "full" ]]; then
            COMMIT_MSG="üîÑ Full sync from ${{ env.SOURCE_REPO }}@${{ env.SOURCE_BRANCH }} (scheduled)"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            COMMIT_MSG="üîÑ Sync from ${{ env.SOURCE_REPO }}@${{ env.SOURCE_BRANCH }} - Commit ${{ github.event.client_payload.after }}"
          else
            COMMIT_MSG="üîÑ Sync from ${{ env.SOURCE_REPO }}@${{ env.SOURCE_BRANCH }}"
          fi
          
          git commit -m "$COMMIT_MSG"
          git push
          
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Changes committed and pushed"
        fi
    
    - name: Process vectors incrementally
      if: steps.commit.outputs.has_changes == 'true' && steps.mode.outputs.mode == 'incremental'
      run: |
        if [ -f /tmp/files_to_process.txt ] && [ -s /tmp/files_to_process.txt ]; then
          FILE_LIST=$(cat /tmp/files_to_process.txt)
          
          if [[ "$FILE_LIST" == "MANUAL_SYNC_ALL" ]]; then
            echo "üîç Manual sync - smart incremental processing"
            python ci_vector_processor.py \
              --data-dir ./data \
              --smart-incremental
          else
            FILE_COUNT=$(wc -l < /tmp/files_to_process.txt)
            echo "üéØ INCREMENTAL: Processing $FILE_COUNT changed file(s)"
            
            python ci_vector_processor.py \
              --data-dir ./data \
              --file-list /tmp/files_to_process.txt \
              --incremental
          fi
        else
          echo "‚ö†Ô∏è No files to process"
        fi
      timeout-minutes: 15
    
    - name: Process all vectors
      if: steps.commit.outputs.has_changes == 'true' && steps.mode.outputs.mode == 'full'
      run: |
        echo "üöÄ FULL PROCESSING: Reprocessing all files"
        python ci_vector_processor.py --data-dir ./data
      timeout-minutes: 120
    
    - name: Validate processing results
      if: steps.commit.outputs.has_changes == 'true'
      run: |
        if [ -f "processing_results.json" ]; then
          echo "‚úÖ Processing completed successfully!"
          cat processing_results.json | python -m json.tool
        else
          echo "‚ùå No processing results file found!"
          exit 1
        fi
    
    - name: Upload artifacts
      if: steps.commit.outputs.has_changes == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: processing-results-${{ github.run_number }}
        path: |
          processing_results.json
          /tmp/files_to_process.txt
          /tmp/changed_files.txt
        retention-days: 30
    
    - name: Slack notification
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: 'Vector Processing Status'
        SLACK_MESSAGE: |
          Status: ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
          Mode: ${{ steps.mode.outputs.mode == 'full' && 'üîÑ FULL' || 'üéØ INCREMENTAL' }}
          Source: ${{ env.SOURCE_REPO }}@${{ env.SOURCE_BRANCH }}
          Files: ${{ steps.sync_incr.outputs.files_changed || steps.sync_all.outputs.files_changed }}
          Trigger: ${{ github.event_name }}
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
